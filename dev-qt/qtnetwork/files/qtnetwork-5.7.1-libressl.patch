diff -Naur qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslcontext_openssl.cpp qtbase-opensource-src-5.7.1/src/network/ssl/qsslcontext_openssl.cpp
--- qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslcontext_openssl.cpp	2017-02-05 12:14:22.961487032 -0800
+++ qtbase-opensource-src-5.7.1/src/network/ssl/qsslcontext_openssl.cpp	2017-02-05 12:15:16.772029960 -0800
@@ -71,6 +71,15 @@
     return dh;
 }
 
+static bool q_enableECSetCurves() {
+        // The ability to select elliptic curves is
+        // present in OpenSSL 1.0.2+ and in LibreSSL 2.5.1+
+        // RFC4492 Section 5.1.1 "Supported Elliptic Curves Extension"
+        return (q_SSLeay() >= 0x10002000L && !q_LibreSSL()) || 
+               q_LibreSSL_version() >= 0x2050100fL;
+}
+
+
 QSslContext::QSslContext()
     : ctx(0),
     pkey(0),
@@ -347,23 +356,20 @@
 
     const QVector<QSslEllipticCurve> qcurves = sslContext->sslConfiguration.ellipticCurves();
     if (!qcurves.isEmpty()) {
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(OPENSSL_NO_EC)
+#if defined(SSL_CTRL_SET_CURVES) && !defined(OPENSSL_NO_EC)
         // Set the curves to be used
-        if (q_SSLeay() >= 0x10002000L) {
-            // SSL_CTX_ctrl wants a non-const pointer as last argument,
-            // but let's avoid a copy into a temporary array
-            if (!q_SSL_CTX_ctrl(sslContext->ctx,
-                                SSL_CTRL_SET_CURVES,
-                                qcurves.size(),
-                                const_cast<int *>(reinterpret_cast<const int *>(qcurves.data())))) {
+        if (q_enableECSetCurves()) {
+            if (!q_SSL_CTX_set1_curves(sslContext->ctx,
+                                       reinterpret_cast<const int *>(qcurves.data()),
+                                       qcurves.size())) {
                 sslContext->errorStr = msgErrorSettingEllipticCurves(QSslSocketBackendPrivate::getErrorsFromOpenSsl());
                 sslContext->errorCode = QSslError::UnspecifiedError;
             }
         } else
-#endif // OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(OPENSSL_NO_EC)
+#endif // defined(SSL_CTRL_SET_CURVES) && !defined(OPENSSL_NO_EC)
         {
             // specific curves requested, but not possible to set -> error
-            sslContext->errorStr = msgErrorSettingEllipticCurves(QSslSocket::tr("OpenSSL version too old, need at least v1.0.2"));
+            sslContext->errorStr = msgErrorSettingEllipticCurves(QSslSocket::tr("This version of OpenSSL lacks support for selecting specific elliptic curves."));
             sslContext->errorCode = QSslError::UnspecifiedError;
         }
     }
diff -Naur qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslsocket_openssl.cpp qtbase-opensource-src-5.7.1/src/network/ssl/qsslsocket_openssl.cpp
--- qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslsocket_openssl.cpp	2017-02-05 12:14:22.959487012 -0800
+++ qtbase-opensource-src-5.7.1/src/network/ssl/qsslsocket_openssl.cpp	2017-02-05 12:15:00.140862158 -0800
@@ -98,6 +98,14 @@
 int QSslSocketBackendPrivate::s_indexForSSLExtraData = -1;
 #endif
 
+static bool q_enableGetServerTmpKey() {
+        // The ability to get the ephemeral server key is
+        // present in OpenSSL 1.0.2+ and in LibreSSL 2.5.1+
+        // RFC4492 Section 5.4 "Server Key Exchange"
+        return (q_SSLeay() >= 0x10002000L && !q_LibreSSL()) || 
+               q_LibreSSL_version() >= 0x2050100fL;
+}
+
 /* \internal
 
     From OpenSSL's thread(3) manual page:
@@ -1587,13 +1595,13 @@
     }
 #endif // OPENSSL_VERSION_NUMBER >= 0x1000100fL ...
 
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
-    if (q_SSLeay() >= 0x10002000L && mode == QSslSocket::SslClientMode) {
+#if defined(SSL_CTRL_GET_SERVER_TMP_KEY)
+    if (q_enableGetServerTmpKey() && mode == QSslSocket::SslClientMode) {
         EVP_PKEY *key;
         if (q_SSL_get_server_tmp_key(ssl, &key))
             configuration.ephemeralServerKey = QSslKey(key, QSsl::PublicKey);
     }
-#endif // OPENSSL_VERSION_NUMBER >= 0x10002000L ...
+#endif // defined(SSL_CTRL_GET_SERVER_TMP_KEY)
 
     connectionEncrypted = true;
     emit q->encrypted();
diff -Naur qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslsocket_openssl_symbols.cpp qtbase-opensource-src-5.7.1/src/network/ssl/qsslsocket_openssl_symbols.cpp
--- qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslsocket_openssl_symbols.cpp	2017-02-05 12:14:22.964487063 -0800
+++ qtbase-opensource-src-5.7.1/src/network/ssl/qsslsocket_openssl_symbols.cpp	2017-02-05 12:23:00.659626640 -0800
@@ -247,6 +247,9 @@
 DEFINEFUNC(int, SSL_connect, SSL *a, a, return -1, return)
 DEFINEFUNC(int, SSL_CTX_check_private_key, const SSL_CTX *a, a, return -1, return)
 DEFINEFUNC4(long, SSL_CTX_ctrl, SSL_CTX *a, a, int b, b, long c, c, void *d, d, return -1, return)
+#if defined(LIBRESSL_VERSION_NUMBER) && LIBRESSL_VERSION_NUMBER >= 0x2050100fL
+DEFINEFUNC3(int, SSL_CTX_set1_groups, SSL_CTX *a, a, const int* b, b, size_t c, c, return 0, return)
+#endif
 DEFINEFUNC(void, SSL_CTX_free, SSL_CTX *a, a, return, DUMMYARG)
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
 DEFINEFUNC(SSL_CTX *, SSL_CTX_new, const SSL_METHOD *a, a, return 0, return)
@@ -846,6 +849,10 @@
     RESOLVEFUNC(SSL_CIPHER_get_bits)
     RESOLVEFUNC(SSL_CTX_check_private_key)
     RESOLVEFUNC(SSL_CTX_ctrl)
+#ifdef LIBRESSL_VERSION_NUMBER
+    if (q_LibreSSL_version() >= 0x2050100fL)
+        RESOLVEFUNC(SSL_CTX_set1_groups)
+#endif
     RESOLVEFUNC(SSL_CTX_free)
     RESOLVEFUNC(SSL_CTX_new)
     RESOLVEFUNC(SSL_CTX_set_cipher_list)
@@ -1006,6 +1012,20 @@
 #endif
     return true;
 }
+
+bool q_LibreSSL()
+{
+    return strncmp(q_SSLeay_version(SSLEAY_VERSION), "LibreSSL", 8) == 0;
+}
+
+long q_LibreSSL_version()
+{
+#ifdef LIBRESSL_VERSION_NUMBER
+    return LIBRESSL_VERSION_NUMBER;
+#else
+    return 0L;
+#endif
+}
 #endif // !defined QT_LINKED_OPENSSL
 
 //==============================================================================
diff -Naur qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslsocket_openssl_symbols_p.h qtbase-opensource-src-5.7.1/src/network/ssl/qsslsocket_openssl_symbols_p.h
--- qtbase-opensource-src-5.7.1.orig/src/network/ssl/qsslsocket_openssl_symbols_p.h	2017-02-05 12:14:22.962487042 -0800
+++ qtbase-opensource-src-5.7.1/src/network/ssl/qsslsocket_openssl_symbols_p.h	2017-02-05 12:21:31.253743268 -0800
@@ -215,6 +215,8 @@
 #endif // !defined QT_LINKED_OPENSSL
 
 bool q_resolveOpenSslSymbols();
+bool q_LibreSSL();
+long q_LibreSSL_version();
 long q_ASN1_INTEGER_get(ASN1_INTEGER *a);
 unsigned char * q_ASN1_STRING_data(ASN1_STRING *a);
 int q_ASN1_STRING_length(ASN1_STRING *a);
@@ -327,6 +329,13 @@
 int q_SSL_connect(SSL *a);
 int q_SSL_CTX_check_private_key(const SSL_CTX *a);
 long q_SSL_CTX_ctrl(SSL_CTX *a, int b, long c, void *d);
+#if defined(LIBRESSL_VERSION_NUMBER) && LIBRESSL_VERSION_NUMBER >= 0x2050100fL
+int q_SSL_CTX_set1_groups(SSL_CTX *a, const int* b, size_t c);
+# define q_SSL_CTX_set1_curves q_SSL_CTX_set1_groups
+#elif !defined(LIBRESSL_VERSION_NUMBER)
+# define SSL_CTX_set1_curves(ctx, clist, clistlen) \
+        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CURVES,clistlen,(char *)clist)
+#endif
 void q_SSL_CTX_free(SSL_CTX *a);
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
 SSL_CTX *q_SSL_CTX_new(const SSL_METHOD *a);
@@ -489,9 +498,9 @@
 int q_EC_curve_nist2nid(const char *name);
 #endif // OPENSSL_VERSION_NUMBER >= 0x10002000L
 #endif // OPENSSL_NO_EC
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if defined(SSL_CTRL_GET_SERVER_TMP_KEY)
 #define q_SSL_get_server_tmp_key(ssl, key) q_SSL_ctrl((ssl), SSL_CTRL_GET_SERVER_TMP_KEY, 0, (char *)key)
-#endif // OPENSSL_VERSION_NUMBER >= 0x10002000L
+#endif // defined(SSL_CTRL_GET_SERVER_TMP_KEY)
 
 // PKCS#12 support
 int q_PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert, STACK_OF(X509) **ca);
